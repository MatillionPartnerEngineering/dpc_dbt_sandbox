type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "Commands for dbt Core"
      parameters:
        componentName: "Start"
    Commands for dbt Core:
      type: "commands-for-dbt-core"
      transitions:
        unconditional:
        - "Python Pushdown"
      parameters:
        componentName: "Commands for dbt Core"
        command: "dbt build"
        dbtUrl: "https://github.com/cnvertbleweathr/dbt_vs_code"
        branch: "master"
        gitFolderPath: "tree/master/Desktop/dbt/vs_code_dbt/vs_code_dbt"
        userName: "cnvertbleweathr"
        gitPassword: "kg_github_cnvertbleweathr"
        mapDbtEnvironmentVariables:
        config:
        profileConfig:
      postProcessing:
        updateScalarVariables:
        - - "jv_dbt_tests_message"
          - "${sysvar.thisComponent.message}"
    Python Pushdown:
      type: "python-pushdown"
      transitions:
        success:
        - "Run Log Parser Transform"
      parameters:
        componentName: "Python Pushdown"
        warehouse: "[Environment Default]"
        externalAccessIntegrations:
        pythonVersion: "3.10"
        packages:
        scriptLocation: "Component"
        pythonScript: "# This script converts\n# THE MESSAGE EXPORT from the RUN DBT\
          \ COMMAND COMPONENT (jv_dbt_exports_message)\n# to a MATILLION GRID VARIABLE\
          \ (gv_dbt_tasks)\n\nfrom datetime import datetime\n\nnow = datetime.now()\n\
          \n# Print the current date and time\nprint(\"Current date and time:\", now)\n\
          \n# Format the date and time & map to variable\nformatted_datetime = now.strftime(\"\
          %Y-%m-%d %H:%M:%S\")\ncontext.updateVariable('jv_currentdate',formatted_datetime)\n\
          \n#CREATE FUNCTION TO CONVERT MULTI-LINE STRING TO LIST\ndef split_lines(s):\n\
          \  return s.split('\\n')\n\n#RUN jv_dbt_tests_message THROUGH FUNCTION\n\
          print(jv_dbt_tests_message)\ndbt_output = split_lines(str(jv_dbt_tests_message))\n\
          \n#LOOP THROUGH LIST OUTPUT AND CREATE NEW LIST WITH PASS/FAIL ENTRIES\n\
          dbt_output_task_list = []\nfor each in dbt_output:\n  if \" of \" in each:\n\
          \    dbt_output_task_list.append(each)\n      \nprint(dbt_output_task_list)\n\
          \n#PARSE THROUGH EACH ITEM AND CONVERT EACH PASS/FAIL ENTRY TO DATAPOINTS\
          \ WITHIN GV\ntotal_task = ''\nnumber_task = ''\ntask_name = ''\nresult =\
          \ ''\nduration = ''\ngv_list = []\n\nfor item in dbt_output_task_list:\n\
          \  if \"OK\" in item:\n    if \"hook\" in item:\n      item_list = []\n\
          \      item_parse = item.split(' ')\n      number_task = item_parse[2]\n\
          \      item_list.append(number_task)\n      total_task = item_parse[4]\n\
          \      item_list.append(total_task)\n      result = item_parse[5]\n    \
          \  item_list.append(result)\n      task_name = item_parse[7]\n      item_list.append(task_name)\n\
          \      duration = item_parse[-1].split(\"'\")[0][:-1]\n      item_list.append(duration)\n\
          \      gv_list.append(item_list)\n    else:\n      item_list = []\n    \
          \  item_parse = item.split(' ')\n      number_task = item_parse[2]\n   \
          \   item_list.append(number_task)\n      total_task = item_parse[4]\n  \
          \    item_list.append(total_task)\n      result = item_parse[5]\n      item_list.append(result)\n\
          \      task_name = item_parse[10]\n      item_list.append(task_name)\n \
          \     duration = item_parse[-1].split(\"'\")[0][:-1]\n      item_list.append(duration)\n\
          \      gv_list.append(item_list)\n  elif (\"PASS\") in item:\n    item_list\
          \ = []\n    item_parse = item.split(' ')\n    number_task = item_parse[2]\n\
          \    item_list.append(number_task)\n    total_task = item_parse[4]\n   \
          \ item_list.append(total_task)\n    result = item_parse[5]\n    item_list.append(result)\n\
          \    task_name = item_parse[6]\n    item_list.append(task_name)\n    duration\
          \ = item_parse[-1].split(\"'\")[0][:-1]\n    item_list.append(duration)\n\
          \    gv_list.append(item_list)\n  elif (\"FAIL\") in item:\n    item_list\
          \ = []\n    item_parse = item.split(' ')\n    number_task = item_parse[2]\n\
          \    item_list.append(number_task)\n    total_task = item_parse[4]\n   \
          \ item_list.append(total_task)\n    result = item_parse[5]\n    item_list.append(result)\n\
          \    task_name = item_parse[7]\n    item_list.append(task_name)\n    duration\
          \ = item_parse[-1].split(\"'\")[0][:-1]\n    item_list.append(duration)\n\
          \    gv_list.append(item_list)\n    \ncontext.updateGridVariable('gv_dbt_tasks',\
          \ gv_list)\n\nprint (gv_dbt_tasks)\n"
        scriptTimeout: "360"
      postProcessing:
        updateScalarVariables:
    Run Log Parser Transform:
      type: "run-transformation"
      parameters:
        componentName: "Run Log Parser Transform"
        transformationJob: "dbt Log Parser/Log Parser Transform.tran.yaml"
        setScalarVariables:
        - - "cur_date"
          - "${jv_currentdate}"
        setGridVariables:
        - variable: "gv_dbt_xtasks"
          status: "grid"
          gridValues:
            fromGrid:
              variable: "gv_dbt_tasks"
              columns:
              - "task_num"
              - "task_total"
              - "task_name"
              - "task_result"
              - "task_duration"
      postProcessing:
        updateScalarVariables:
  variables:
    jv_currentdate:
      metadata:
        type: "TEXT"
        description: ""
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "1900-01-01"
    jv_dbt_tests_message:
      metadata:
        type: "TEXT"
        description: ""
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "DEFAULT jv_dbt_tests_message"
    gv_dbt_tasks:
      metadata:
        type: "GRID"
        description: ""
        scope: "SHARED"
        visibility: "PUBLIC"
        columns:
          task_num:
            columnType: "TEXT"
          task_total:
            columnType: "TEXT"
          task_name:
            columnType: "TEXT"
          task_result:
            columnType: "TEXT"
          task_duration:
            columnType: "TEXT"
      defaultValue:
      - - "1"
        - "1"
        - "1"
        - "1"
        - "1"
design:
  components:
    Start:
      position:
        x: 0
        "y": 0
      tempMetlId: 1
    Commands for dbt Core:
      position:
        x: 220
        "y": 0
      tempMetlId: 2
    Python Pushdown:
      position:
        x: 420
        "y": 0
      tempMetlId: 3
    Run Log Parser Transform:
      position:
        x: 610
        "y": 0
      tempMetlId: 4
